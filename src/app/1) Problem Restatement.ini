1) Problem Restatement
• You have many KML segments (site-to-site links) forming a huge spatial graph. • Terminals are fixed: A → B. • Primary route (R1): choose the shortest path among possibly multiple candidate chains (e.g. A→a1→…→B or A→c1→…→B). • Backup route (R2): must be strictly node-disjoint from R1 except at A and B (allowing “dual entries” at A/B under a small coordinate tolerance).

2) Core Pre-Processing
• Spatial clustering of raw KML endpoints within a tolerance (e.g. 1e-4°) to collapse near-duplicate “entry” points—automatically handles your dual-entry exception. • Graph model: – Nodes = clustered sites – Edges = KML segments, weighted by geodesic length • Scale concerns → build incrementally via streaming + an on-disk spatial index (R-tree/Flatbush) and adjacency lists in batches.

3) Approach A: Dijkstra + Node-Removal
Run Dijkstra/A* on full graph → pick shortest R1.

Blacklist (remove) all R1’s intermediate nodes.

Re-run Dijkstra/A* → yields R2.

Pros • Very simple to implement • Leverages well-known SSSP

Cons • No global guarantee: R2 might be much longer than necessary • Two separate runs—could be wasteful if graph is huge

4) Approach B: Suurballe’s Two-Disjoint-Paths
• A single algorithm that finds two node-disjoint shortest paths (A→B) minimizing total cost. • Internally it:

Runs one shortest-path

Modifies edge weights

Finds a second path in the residual graph

Pros • Guarantees two optimal disjoint paths in one shot • Complexity ~ O(E + V log V) (two Dijkstra-like runs)

Cons • More complex to code or integrate • Needs directed-graph transformation

5) Approach C: k-Shortest-Paths (Yen’s) + Filter
Generate k best simple paths (Yen’s algorithm).

Pick the first that shares only A/B with R1.

Pros • Flexible—can explore multiple trade-offs (cost vs. disjointness) • Easier to plug into libraries

Cons • Complexity ~ O(k · (E + V log V))—if k is large, can be slow • You must choose a sensible k

6) Approach D: Floyd–Warshall (All-Pairs)
• Precomputes every pair’s distance in O(V³) time and O(V²) space.

Pros • Conceptually trivial once distances are in a matrix

Cons • Totally unscalable for ISP-sized graphs (thousands → millions of nodes) • Wastes effort—only need A→B

7) Scaling & Implementation Notes
Streaming KML ingestion into a spatial index to cluster & dedupe points on the fly.

Adjacency list stored in memory-mapped files or a lightweight graph DB (Neo4j, LevelGraph).

Parallel Dijkstra/A\*/Suurballe on Web Workers or server threads if needed.

Threshold tuning: coordinate-clustering tolerance to catch “near-duplicate” entry points; no hard limit on route length/hops.

Next Decision
• If you need simplicity: go with Approach A plus spatial clustering. • If you need guaranteed optimal pairs: invest in Suurballe’s algorithm (Approach B). • If you want to explore trade-offs: use Yen’s k-shortest (Approach C).

Which path should we drill into first?